// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  surname  String @db.VarChar(100)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(100)
  age      Int
  stars    Int    @default(0)
  position String @default("DF") @db.VarChar(2)
  force    Int    @default(0)
  attack   Int    @default(0)
  defense  Int    @default(0)
  kick     Int    @default(0)
  pass     Int    @default(0)
  headbutt Int    @default(0)

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?

  Group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  matches MatchUser[] // Relacionamento com a tabela intermediária MatchUser

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Team {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  users User[]

  Group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  Match   Match? @relation(fields: [matchId], references: [id])
  matchId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  users   User[]
  teams   Team[]
  matches Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}

model Match {
  id   Int      @id @default(autoincrement())
  day  DateTime
  hour String   @db.VarChar(100)

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  teams Team[] // Times relacionados ao match
  users MatchUser[] // Relacionamento com a tabela intermediária MatchUser

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("matches")
}

model MatchUser {
  userId  Int
  matchId Int
  user    User  @relation(fields: [userId], references: [id])
  match   Match @relation(fields: [matchId], references: [id])

  @@id([userId, matchId]) // Chave composta para evitar duplicidade
}
